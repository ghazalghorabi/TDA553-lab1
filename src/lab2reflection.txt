 
1.
Yes our design has Car as a supertype, Saab extends Car, Trucks also extends Car.    
And Scania in return is extending Trucks.
Contract for break and gas works somewhat similar in both cases.
Except that the trucks have a condition for when they are allowed to gas, their ramp has to be closed. 
I would say that we follow the Liskov Substitution Principle, just because the Trucks have an “extra condition” 
does not mean that they break the contract for cars.
I guess you could say the contract for a Car to gas or brake is easy (since it has no conditions). 
And that the truck contract is just stronger than the Car contract.

2.
We created a superclass called Truck to handle duplication of code between Scania and CarTransporter.                                                                                                 
With the CarShop and CarTransporter we could not use the same way since one is a vehicle and the other isn't. 
Instead we choose to create an interface with the common functions. 
Our purpose with this was to abstract the code. 

3.
Yes we needed to modify it quite a bit! In our first version of lab 1 we only used subclassing (since it was the only thing we knew). '
So our code has been on a little journey. In lab 1 we only created Cars and very specific functions for those cars.
So when we got to lab 2 we had to rethink a lot of things. 
